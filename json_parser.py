import bs_refs
import git
import json
import os
import pathlib
import re
import shutil
from datetime import datetime

from dotenv import load_dotenv

load_dotenv()
path = pathlib.Path("cvelist")


def cvss_grabber(cvss):
	split_cvss = cvss.split("/")
	return split_cvss[-1]


def cvss_shortener(cvss):
	if "CVSS" in cvss:
		split_cvss = cvss.split("CVSS")
		return str("CVSS" + split_cvss[1])
	else:
		return cvss


class CveOrg:
	def __init__(self):
		pass

	@staticmethod
	def download():

		cve_dict = {"cves": []}

		for f in path.rglob("*/*.json"):
			with open(f, encoding="utf8", errors='ignore') as f:

				data = json.load(f)

				for k in data.keys():
					if k == "CVE_data_meta":
						cve_id = data["CVE_data_meta"]["ID"]
						cve_dict["cves"].append(
							{cve_id: {"product": None, "vendor": None, "desc": None, "vector": None, "score": None,
									  "references": {"wallarm": None, "imperva": None, "fedora": None, "ubuntu": None,
													 "osv": None, "github": None, "cveorg": None}}})

					if k == "description":
						desc = data["description"]["description_data"][0]["value"]
						for element in cve_dict["cves"]:
							for key in element.keys():
								if key == cve_id:
									element[cve_id]["desc"] = desc
									element[cve_id]["references"]["wallarm"] = bs_refs.wallarm_refs(cve_id)
									element[cve_id]["references"]["imperva"] = bs_refs.imperva_refs(cve_id)
									element[cve_id]["references"]["fedora"] = bs_refs.fedora_refs(cve_id)
									element[cve_id]["references"]["ubuntu"] = bs_refs.ubuntu_refs(cve_id)
									element[cve_id]["references"]["osv"] = bs_refs.osv_refs(cve_id)
									element[cve_id]["references"]["github"] = bs_refs.github_refs(cve_id)

					if k == "affects":
						vendor = data["affects"]["vendor"]["vendor_data"][0]["vendor_name"]
						product = data["affects"]["vendor"]["vendor_data"][0]["product"]["product_data"][0][
							"product_name"]
						for element in cve_dict["cves"]:
							for key in element.keys():
								if key == cve_id:
									element[cve_id]["vendor"] = vendor
									element[cve_id]["product"] = product

					if k == "references":
						references = []

						for exploit in data["references"]["reference_data"]:
							references.append(exploit['url'])

						for element in cve_dict["cves"]:
							for key in element.keys():
								if key == cve_id:
									element[cve_id]["references"]["cveorg"] = references

					if k == "impact":
						if data[k] is not None:
							if "cvss" in data[k]:
								if type(data[k]["cvss"]) == dict:
									if data[k]["cvss"].get("vectorString") is not None:
										vector = cvss_shortener(str(data[k]["cvss"]["vectorString"]))
										for element in cve_dict["cves"]:
											for key in element.keys():
												if key == cve_id:
													element[cve_id]["vector"] = vector
									if data[k]["cvss"].get("baseScore") is not None:
										baseScore = str(data[k]["cvss"]["baseScore"])
										for element in cve_dict["cves"]:
											for key in element.keys():
												if key == cve_id:
													element[cve_id]["score"] = baseScore
													print(cve_dict)

								elif type(data[k]["cvss"]) == list:
									for l in data[k]["cvss"]:
										if type(l) == dict:
											if data[k]["cvss"][0]["vectorString"] is not None:
												vector = cvss_shortener(str(data[k]["cvss"][0]["vectorString"]))
												for element in cve_dict["cves"]:
													for key in element.keys():
														if key == cve_id:
															element[cve_id]["vector"] = vector
										elif type(l) == list:
											vector = cvss_shortener(str(data[k]["cvss"][0][0]["vectorString"]))
											for element in cve_dict["cves"]:
												for key in element.keys():
													if key == cve_id:
														element[cve_id]["vector"] = vector
		cve_json = json.dumps(cve_dict)

		f = open(f"./result.txt", "w")
		f.write(cve_json)
		f.close()

	@staticmethod
	def update():
		pull_repo = git.Repo(os.getenv('PULL_REPO'))
		project_repo = git.Repo(os.getenv('PROJECT_REPO'))
		o = pull_repo.remotes.origin
		o.pull()
		project_repo.git.add(all=True)
		project_repo.index.commit("Commit with GitPython")
		diff_result = project_repo.git.diff("--submodule=diff", "HEAD^")

		new_file = set(re.findall(r"CVE-[0-9]+-[0-9]+.json\n@@ -0,0", diff_result))
		edit_file = set(re.findall(r"CVE-[0-9]+-[0-9]+.json\n@@ -[1-9]", diff_result))

		new = [i[:-8] for i in new_file]
		edited = [i[:-6] for i in edit_file]
		result = {"new": new, "edited": edited}
		json_result = json.dumps(result)
		changes_folder = "changes-" + str(datetime.today().strftime('%Y-%m-%d'))

		if os.path.exists("date"):
			try:
				os.makedirs(f"date/{changes_folder}")
				f = open(f"./date/{changes_folder}/changes.txt", "w")
				f.write(json_result)
				f.close()

				os.makedirs(f"date/{changes_folder}/new")
				os.makedirs(f"date/{changes_folder}/edited")

				for f in path.rglob("*/*.json"):
					if cvss_grabber(str(f)) in new:
						shutil.copy(f, f"date/{changes_folder}/new")
					elif cvss_grabber(str(f)) in edited:
						shutil.copy(f, f"date/{changes_folder}/edited")
			except FileExistsError:
				print("Folder with today's diffs already created")
		else:
			os.makedirs("date")
			os.makedirs(f"date/{changes_folder}")

			f = open(f"date/{changes_folder}/changes.txt", "w")
			f.write(json_result)
			f.close()

			os.makedirs(f"date/{changes_folder}/new")
			os.makedirs(f"date/{changes_folder}/edited")

			for f in path.rglob("*/*.json"):
				if cvss_grabber(str(f)) in new:
					shutil.copy(f, f"date/{changes_folder}/new")
				elif cvss_grabber(str(f)) in edited:
					shutil.copy(f, f"date/{changes_folder}/edited")
